name: Build and store Docker Images

on:
  workflow_call:
    inputs:
      image_proper_name:
        description: Proper name for the image
        required: true
        type: string
      image_name:
        description: Name of the image to be built
        required: true
        type: string
      dev_version_name:
        description: Name to attached to the development build version
        default: dev
        required: true
        type: string
      pre_build_script:
        description: Script to run before image build process
        required: false
        type: string
      build_path:
        description: Directory to build docker image
        required: true
        type: string
    secrets:
      DOCKER_ACCESS_TOKEN:
        description: Docker Access Token
        required: true

jobs:
  build_push_image:
    name: Building and storing Docker Images
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.build_path }}
    steps:
      - name: Checking out the repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332

      - name: Logging into Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - id: semver
        name: Generate Semantic Versioned Tag and Name for the Docker Image
        run: |

          # Major version is stored in the GitHub Organization Variables
          MAJOR_VERSION="${{ vars.MAIN_RELEASE }}"

          if [[ "${{ github.event_name }}" == "push" ]]
          then
            # Minor version is fetched from the issue number this branch is created for.
            MINOR_VERSION=$(echo "${{ github.ref_name }}" | cut -d/ -f2)

            # Patch version is the run number of the pipeline
            PATCH_VERSION=$(echo "${{ github.run_number }}")

            # Form the final development version
            export SEMVER_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION-${{ inputs.dev_version_name }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]
          then
            # Minor version is fetched from the issue number this branch is created for.
            MINOR_VERSION=$(echo "${{ github.head_ref }}" | cut -d/ -f2)

            # Patch version is the pull request number
            PATCH_VERSION=$(echo "${{ github.event.pull_request.number }}")

            # Form the final development version
            export SEMVER_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION"
          else
          then
            # Default value for minor version
            MINOR_VERSION="0"

            # Default value for patch version
            PATCH_VERSION="0"

            # Form the final development version
            export SEMVER_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION"
          fi

          # Form the image name
          export IMAGE_NAME="${{ vars.DOCKER_USERNAME }}/${{ inputs.image_name }}"

          # Export the version and the image name
          echo "SEMVER_VERSION=$SEMVER_VERSION" >> "$GITHUB_OUTPUT"
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_OUTPUT"

      - name: Running script before docker image build
        if: ${{ inputs.pre_build_script != '' }}
        env:
          SEMVER_VERSION: ${{ steps.semver.outputs.SEMVER_VERSION }}
          IMAGE_NAME: ${{ steps.semver.outputs.IMAGE_NAME }}
        run: ${{ inputs.pre_build_script }}

      - name: Build the Docker Image
        env:
          SEMVER_VERSION: ${{ steps.semver.outputs.SEMVER_VERSION }}
          IMAGE_NAME: ${{ steps.semver.outputs.IMAGE_NAME }}
        run: |

          # Build the docker image
          docker build -t "${{ env.IMAGE_NAME }}:${{ env.SEMVER_VERSION }}" .

      - name: Push the Runner image to Docker Hub
        env:
          SEMVER_VERSION: ${{ steps.semver.outputs.SEMVER_VERSION }}
          IMAGE_NAME: ${{ steps.semver.outputs.IMAGE_NAME }}
        run: docker push "${{ env.IMAGE_NAME }}" --all-tags

      - name: Output Runner Image Details as a Job Summary
        env:
          SEMVER_VERSION: ${{ steps.semver.outputs.SEMVER_VERSION }}
          IMAGE_NAME: ${{ steps.semver.outputs.IMAGE_NAME }}
        run: |
          echo "# ${{ inputs.image_proper_name }} Image Details" >> $GITHUB_STEP_SUMMARY
          echo '**Image Name**: `${{ env.IMAGE_NAME }}`' >> $GITHUB_STEP_SUMMARY
          echo '**Tags**: `${{ env.SEMVER_VERSION }}`' >> $GITHUB_STEP_SUMMARY
          echo '**Fully Qualified Image Name**: `${{ env.IMAGE_NAME }}:${{ env.SEMVER_VERSION }}`' >> $GITHUB_STEP_SUMMARY

